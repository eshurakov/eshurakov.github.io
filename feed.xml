<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://shurakov.name/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shurakov.name/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-06-01T23:45:39+02:00</updated><id>https://shurakov.name/feed.xml</id><title type="html">Evgeny Shurakov</title><subtitle></subtitle><author><name>Evgeny Shurakov</name></author><entry><title type="html">Prepare for release</title><link href="https://shurakov.name/prepare-for-release/" rel="alternate" type="text/html" title="Prepare for release" /><published>2020-02-01T12:00:00+01:00</published><updated>2020-02-01T12:00:00+01:00</updated><id>https://shurakov.name/prepare-for-release</id><content type="html" xml:base="https://shurakov.name/prepare-for-release/">&lt;p&gt;There is more to the process of releasing an app than archiving a project using release build configuration and uploading to the store. As the app grows you want to be sure about the quality.&lt;/p&gt;

&lt;p&gt;In the mobile development world delivering the app to the customer takes time. Quite some time :-) Some years ago it was multiple days or even weeks of waiting time, now it’s a bit better and usually takes one or two days (thanks Apple!). Still, if you have a critical bug in the app that you want to fix, one or two days is a lot of time.&lt;/p&gt;

&lt;p&gt;I collected several ways to help to ensure the quality of the app.&lt;/p&gt;

&lt;!-- More --&gt;

&lt;p&gt;&lt;strong&gt;Code freeze&lt;/strong&gt;
After code freeze and before release, modifications to the code are discouraged and normally only bugfixes would be applied. Unfinished features normally not included and stay either in their branches or hidden from the user with feature toggles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internal build (Private Beta)&lt;/strong&gt;
Private Beta is a version of the app for internal testing. If the app uses a backend, it usually connects to the beta version of the backend.
To distinguish between different versions of the app, it is a good idea to use a different bundle identifier, app name, and icon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unit, UI and Integration Tests&lt;/strong&gt;
Tests are nice to have. They can help to save time by automating common usage scenarios or finding regression of older bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bug bash&lt;/strong&gt;
During bug bash, a group of people tests features and bugfixes that will be released. Participants don’t need to be technical, but they do need a good knowledge of the app. It’s good to test on different phone models and OS versions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check localization&lt;/strong&gt;
Localization can be checked during bug bash or as a separate event.
Automate what can be automated. For example, check that all strings are translated while making an internal build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;External build (Public Beta)&lt;/strong&gt;
Public Beta is a version of the app that connects to live BE and is as close to the live app as possible. Depending on the length of the release cycle, the app can stay in public beta for multiple weeks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collecting feedback, checking crash reporting tool&lt;/strong&gt;
Feedback from users is a good way to check if things are working as expected.
Keep an eye on incoming crash reports. Is there something suspicious, are there new crashes? Depending on the severity you can decide to fix it now and send a new beta build or fix it in the next version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incentives to use a Public Beta&lt;/strong&gt;
Using Public Beta app is beneficial to you, but why would users want to be a guinea pig?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;early access to new features. This one is easy, no additional work is required :-)&lt;/li&gt;
  &lt;li&gt;priority support. All questions and messages from beta users can be prioritized and answered first&lt;/li&gt;
  &lt;li&gt;benefits, that only exist in Public Beta version. For example, if the app works via subscription, users could get some small discount as long as they’re using the beta app and keep it up to date.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Staged rollout&lt;/strong&gt;
Unfortunately, the staged rollout for iOS devices is very primitive in functionality, but still may be useful to limit the number of users updating to the latest version at the same time.&lt;/p&gt;</content><author><name>Evgeny Shurakov</name></author><summary type="html">There is more to the process of releasing an app than archiving a project using release build configuration and uploading to the store. As the app grows you want to be sure about the quality. In the mobile development world delivering the app to the customer takes time. Quite some time :-) Some years ago it was multiple days or even weeks of waiting time, now it’s a bit better and usually takes one or two days (thanks Apple!). Still, if you have a critical bug in the app that you want to fix, one or two days is a lot of time. I collected several ways to help to ensure the quality of the app.</summary></entry><entry><title type="html">Localization tips for iOS</title><link href="https://shurakov.name/ios-localization-tips/" rel="alternate" type="text/html" title="Localization tips for iOS" /><published>2020-01-01T12:00:00+01:00</published><updated>2020-01-01T12:00:00+01:00</updated><id>https://shurakov.name/ios-localization-tips</id><content type="html" xml:base="https://shurakov.name/ios-localization-tips/">&lt;p&gt;&lt;strong&gt;Start from day one&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Think about localization from day one, even if the app supports only one language. It doesn’t take much time but makes your life easier in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use identifiers as keys&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use identifiers that reflect the function of the element as well as its location in the app.&lt;/li&gt;
  &lt;li&gt;Use the same identifier prefix for keys that belong to the same functional unit/page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Write good comments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Give the key a comment, saying where it is located on the screen, what kind of element it is, and what is the function. Describe all parameters that are used in this string. Use business terms, that is used in the app and not developers slang, cause most likely it won’t be localized by developers :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always use numbered format specifiers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When using format specifiers, use numbered ones so that translators can shuffle them around.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;/* Action button to go to the next screen after user picks a date / Select countdown date screen / Create new event flow */
&quot;create_event_select_countdown_date_action_button&quot; = &quot;Go&quot;;

/* Interval description / Select countdown date screen / Create new event flow. Parameters: %1$@ - formatted number of days (1 day, 5 days) */
&quot;create_event_select_countdown_date_interval_description&quot; = &quot;Start %1$@ countdown&quot;;

/* Screen title / Select countdown date screen / Create new event flow */
&quot;create_event_select_countdown_date_title&quot; = &quot;Select countdown date&quot;;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Skip interface builder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find it very hard to localize interface builder files and storyboards.
I tried two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;one interface file per language for the same screen is &lt;strong&gt;a lot&lt;/strong&gt; of work to maintain and support&lt;/li&gt;
  &lt;li&gt;using Xcode string export/import results in keys that don’t make sense and it’s not possible to add a comment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My solution is to create UI elements in code or connect them from the interface file to the code and do all localization from the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Provide screenshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Screenshots are a great way to understand the context in which strings are used. Understanding context is important to get quality localization.
Many of localization services (OneSky, Lokalise) provide a library that can take a screenshot and mark all keys it sees on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Audit language files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When making a release build, add a step to check that everything is localized. This can be done by going through language files and comparing key and its value. If they are the same, it means the localization is missing.&lt;/p&gt;</content><author><name>Evgeny Shurakov</name></author><summary type="html">Start from day one Think about localization from day one, even if the app supports only one language. It doesn’t take much time but makes your life easier in the future. Use identifiers as keys Use identifiers that reflect the function of the element as well as its location in the app. Use the same identifier prefix for keys that belong to the same functional unit/page. Write good comments Give the key a comment, saying where it is located on the screen, what kind of element it is, and what is the function. Describe all parameters that are used in this string. Use business terms, that is used in the app and not developers slang, cause most likely it won’t be localized by developers :-) Always use numbered format specifiers When using format specifiers, use numbered ones so that translators can shuffle them around. Example 1 2 3 4 5 6 7 8 /* Action button to go to the next screen after user picks a date / Select countdown date screen / Create new event flow */ &quot;create_event_select_countdown_date_action_button&quot; = &quot;Go&quot;; /* Interval description / Select countdown date screen / Create new event flow. Parameters: %1$@ - formatted number of days (1 day, 5 days) */ &quot;create_event_select_countdown_date_interval_description&quot; = &quot;Start %1$@ countdown&quot;; /* Screen title / Select countdown date screen / Create new event flow */ &quot;create_event_select_countdown_date_title&quot; = &quot;Select countdown date&quot;; Skip interface builder I find it very hard to localize interface builder files and storyboards. I tried two options: one interface file per language for the same screen is a lot of work to maintain and support using Xcode string export/import results in keys that don’t make sense and it’s not possible to add a comment My solution is to create UI elements in code or connect them from the interface file to the code and do all localization from the code. Provide screenshots Screenshots are a great way to understand the context in which strings are used. Understanding context is important to get quality localization. Many of localization services (OneSky, Lokalise) provide a library that can take a screenshot and mark all keys it sees on it. Audit language files When making a release build, add a step to check that everything is localized. This can be done by going through language files and comparing key and its value. If they are the same, it means the localization is missing.</summary></entry></feed>